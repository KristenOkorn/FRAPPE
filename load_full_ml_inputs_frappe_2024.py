# -*- coding: utf-8 -*-
"""
Created on Thu Feb 29 06:20:59 2024

2024 updated code for making ann_inputs
for FRAPPE Pandora data (from LaRC archive)

@author: okorn
"""

#Import helpful toolboxes etc
import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np
import seaborn as sns
from datetime import datetime, timedelta

#create a directory path for us to pull from / save to
path = 'C:\\Users\\okorn\\Documents\\2023 Deployment\\Modeling Surface Concentrations\\FRAPPE Pandora\\Pandora'

#pollutant loop first

#set up pollutant structures to loop through
pollutants = ['O3']

#get the names of the locations (in order)
locations = ['Platteville','BAO','NREL']

#load in the pressure data - many files will need to be combined
#create a directory path for us to pull from / save to
metpath = 'C:\\Users\\okorn\\Documents\\2023 Deployment\\Modeling Surface Concentrations\\FRAPPE Pandora\\Pressure'

#Get the list of files from this directory
from os import listdir
from os.path import isfile, join
fileList = [f for f in listdir(path) if isfile(join(path, f))]

#loop through for each pollutant
for n in range(len(pollutants)):

    #iterate over each file in the main folder
    for i in range(len(fileList)):
        #----------------------------------------
        #Create full file path for reading file
        filePath = os.path.join(path, fileList[i])
        #load in the file
        temp = pd.read_csv(filePath,skiprows=77,sep=',',encoding = "ISO-8859-1",index_col=0,
                       usecols = [ '    Date-GMT','      O3','        Temp-Eff',' SZA'])
        #if NO2, skiprows = 76
        #if O3, skiprows = 77
        #remove empty spaces in data for workability
        temp.columns = temp.columns.str.strip() 
        #rename the index
        temp = temp.rename_axis('datetime')
        #rename teff
        temp = temp.rename(columns={'Temp-Eff': 'TEff'})
        #correct the format of the datetimes
        temp.index = pd.to_datetime(temp.index, format='%Y%m%d%H%M%S')
        #retime to minutely
        temp = temp.resample('T').mean()
        #drop any NaNs generated by the resampling
        temp = temp.dropna()
        #Set the datetime index back by 6 hours  (MDT)
        temp.index = temp.index - pd.Timedelta(hours=6)
        #----------------------------------------
    
        #now load in the matching pressure data
        #note - already in MDT (UTC -6)
        metfilePath = os.path.join(metpath, 'Pressure_{}.csv'.format(locations[i]))
        #load in the file
        met = pd.read_csv(metfilePath,index_col=0)
        #reformat the datetime index
        met.index = pd.to_datetime(met.index, format="%Y-%m-%d %H:%M:%S")
        #rename the pressure column - need lower case
        met = met.rename(columns={'Pressure': 'pressure'})
        #----------------------------------------
        
        #Merge the data based on datetime index
        merge=pd.merge(temp,met,left_index=True,right_index=True)
        #----------------------------------------
        
        #save out the final data
        savePath = os.path.join(path,'{}_column_extra_{}.csv'.format(locations[i],pollutants[n]))
        merge.to_csv(savePath)